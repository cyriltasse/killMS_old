import ModParsetType
import ClassMS
import os
import numpy as np
import ephem

def GiveDate(tt):
    import pyrap.quanta as qa
    import pyrap.measures as pm
    time_start = qa.quantity(tt, 's')
    me = pm.measures()
    dict_time_start_MDJ = me.epoch('utc', time_start)
    time_start_MDJ=dict_time_start_MDJ['m0']['value']
    JD=time_start_MDJ+2400000.5-2415020
    d=str(ephem.Date(JD))
    return d

class Conform():
    def __init__(self,MSname="/media/6B5E-87D0/TestOlegVLA/1365703363_TriAust_for_Cyril.ms"):

    #MS=ClassMS.ClassMS("/media/6B5E-87D0/TestOlegVLA/3C147_nobl_spw2.MS",Col="CORRECTED_DATA")
        self.Cols=["DATA","CORRECTED_DATA"]
        self.MS=ClassMS.ClassMS(MSname,Col=self.Cols)
        self.MS1name=self.MS.MSName+".reformed"
        self.RevertFreqs=False
        if self.MS.dFreq<0:
            self.RevertFreqs=True
    

    def makems(self):
        D={}
        MS=self.MS
        MS1name=self.MS1name
        
        D["AntennaTableName"]={"id":0,"val":MS.MSName+"/ANTENNA"}
        D["Declination"]={"id":0,"val":MS.StrDEC}
        D["RightAscension"]={"id":0,"val":MS.StrRA}
        D["MSName"]={"id":0,"val":MS1name}
        D["WriteAutoCorr"]={"id":0,"val":MS.MSName+".reformed"}
        D["NFrequencies"]={"id":0,"val":MS.Nchan}
        D["StepTime"]={"id":0,"val":MS.dt}
        D["NBands"]={"id":0,"val":1}
        D["WriteAutoCorr"]={"id":0,"val":"T"}
        D["StepFreq"]={"id":0,"val":np.abs(MS.dFreq)}

        D["StartFreq"]={"id":0,"val":np.min(MS.ChanFreq.flatten())-np.abs(MS.dFreq)/2.}
        D["StartTime"]={"id":0,"val":"29-sep-2005/13:00:00"}#GiveDate(np.min(MS.times_all))}#"29-sep-2005/13:00:00"}
        D["NTimes"]={"id":0,"val":int((np.max(MS.times_all)-np.min(MS.times_all))/MS.dt)+3}

        D["VDSPath"]={"id":0,"val":"."}
        D["WriteImagerColumns"]={"id":0,"val":"T"}
    
        ModParsetType.DictToParset(D,"makems.tmp.cfg")
        os.system("~/casa/parallel/build/gnu_opt/CEP/MS/src/makems makems.tmp.cfg")


    def putInMS(self):
        MS=self.MS
        MS1name=self.MS1name
        
        from pyrap.tables import table
        MSout=ClassMS.ClassMS(MS1name,Col=self.Cols)

        t=table(MS1name)
        uvw=t.getcol("UVW")
        MSout.uvw.fill(0)
        
        MSout.times_all-=MSout.times_all[0]
        MSout.times_all+=MS.times_all[0]
        Tbins=sorted(list(set(MS.times_all.tolist())))
        
        idx=0
        AntMap=np.zeros((MS.na,MS.na),dtype=np.int32)
        for i in range(MS.na):
            for j in range(i,MS.na):
                AntMap[i,j]=idx
                #AntMap[MSout.A0[idx],MSout.A1[idx]]=idx
                idx+=1

        t0=MS.times_all[0]
        it=np.int64(np.round((MS.times_all-t0)/MS.dt))*MSout.nbl
        Rowmap=it+AntMap[MS.A0,MS.A1]
        
        
        
        indIn=np.arange(MS.uvw.shape[0])
        MSout.flag_all.fill(1)
        MSout.uvw[Rowmap,:]=MS.uvw[:,:]
        MSout.times_all[Rowmap]=MS.times_all[:]
        MSout.A0[Rowmap]=MS.A0[:]
        MSout.A1[Rowmap]=MS.A1[:]
        
        if not(self.RevertFreqs):
            for i in range(len(self.Cols)):
                MSout.data[i][Rowmap,:,:]=MS.data[i][:,:,:]
            MSout.flag_all[Rowmap,:,:]=MS.flag_all[:,:,:]
        else:
            for i in range(len(self.Cols)):
                MSout.data[i][Rowmap,::-1,:]=MS.data[i][:,:,:]
            MSout.flag_all[Rowmap,::-1,:]=MS.flag_all[:,:,:]


        MSout.SaveAllDataStruct()


if __name__=="__main__":
    import sys
    MSname=sys.argv[1]
    C=Conform(MSname)
    C.makems()
    C.putInMS()

